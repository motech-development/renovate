name: Renovate

on:
  schedule:
    - cron: '0 * * * *'

  workflow_dispatch:

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}

env:
  cache_archive: renovate_cache.tar.gz
  cache_dir: /tmp/renovate/cache/renovate/repository
  cache_key: renovate-cache

jobs:
  renovate:
    runs-on: ubuntu-latest

    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Download cache
        uses: dawidd6/action-download-artifact@v10
        continue-on-error: true
        with:
          name: ${{ env.cache_key }}
          path: cache-download

      - name: Extract renovate cache
        run: |
          set -x
          # Skip if no cache is set, such as the first time it runs.
          if [ ! -d cache-download ] ; then
            echo "No cache found."
            exit 0
          fi

          # Make sure the directory exists, and extract it there. Note that it's nested in the download directory.
          mkdir -p $cache_dir
          tar -xzf cache-download/$cache_archive -C $cache_dir

          # Unfortunately, the permissions expected within renovate's docker container
          # are different than the ones given after the cache is restored. We have to
          # change ownership to solve this. We also need to have correct permissions in
          # the entire /tmp/renovate tree, not just the section with the repo cache.
          sudo chown -R 12021:0 /tmp/renovate/
          ls -R $cache_dir

      - name: Renovate
        uses: renovatebot/github-action@v42.0.4
        with:
          configurationFile: .github/renovate-config.json
          token: ${{ steps.generate_token.outputs.token }}
        env:
          RENOVATE_PLATFORM_COMMIT: true
          RENOVATE_REPOSITORY_CACHE: enabled

      - name: Compress cache
        run: |
          ls $cache_dir
          # The -C is important -- otherwise we end up extracting the files with
          # their full path, ultimately leading to a nested directory situation.
          # To solve *that*, we'd have to extract to root (/), which isn't safe.
          tar -czvf $cache_archive -C $cache_dir .

      - name: Upload cache
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.cache_key }}
          path: ${{ env.cache_archive }}
          retention-days: 1
